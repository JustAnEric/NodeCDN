const startKey = Math.random();

class NodeCDNConfigSession {
    constructor(auth) {
        this.auth = auth;
        if (auth != `nodejscdnauthorisationkeyenabled-${startKey}`) {
            return console.warn('NodeCDNConfigSession not started because of an access violation.')
        } else { return console.warn('NodeCDNConfigSession started in environment mode.') }
    }

    setRequiredCookies(key) {
        var nodeSessionAuthentication = {
            url: window.location.href,
            sessionName: key,
            state: 'Online',
            authType: 'anonymous',

        }
        sessionStorage.setItem("node_required_cookies__auth", JSON.stringify(nodeSessionAuthentication))
    }
}

class Node {
    constructor() {
        this.key = "DefaultKey" // this is the default key and know for detection
        this.clientType = "WEB-CLIENT" // this is for browser detection when useful
    }

    Client(userKey) {
        this.clientType = navigator.userAgentData
        this.key = userKey
        if (!userKey) return console.error('Invalid user key provided in function Client() for NodeCDN!')
        console.log('Client has been registered.')
        // Set registered cookies
        var cdn = new NodeCDNConfigSession(`nodejscdnauthorisationkeyenabled-${startKey}`);
        cdn.setRequiredCookies(userKey)
        console.log('-----------------------Useful Info-----------------------')
        console.log(`# Your Key: ${this.key}`)
        console.log(`# Client Type: ${this.clientType.platform} --> Chrome (guess?)`)
        console.log(`# IP: unknown and not recorded ! disabled because of hackers!`)
        console.warn(` @ Note: this is private information for you. Do not share it with others otherwise you might be in a pickle! This includes pasting code into this Console too.`)
        console.log('---------------------End Useful Info---------------------')
    }

    PingServer(times) {
        if (!this.key) return console.error('Invalid user key provided in function Client() through PingServer() for NodeCDN!')
        let totalTimesPinged = 0;
        setInterval(function() {
            setTimeout(function() {
                if (totalTimesPinged < times) {
                    console.error('Ping server failed.')
                    totalTimesPinged += 1;
                }
            }, 1000);
        })
    }

    makeFunction(code, executorOptions) {
        if (!executorOptions['exec']) return code
        if (executorOptions['exec']) return code()
    }
}

function Init(access) {
    console.warn(`Please don't use this function. This function is being taken up by NodeCDN. You can overwrite it but overwriting will cause problems. [Init()]`)
}